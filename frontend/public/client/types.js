/*
 Generated by typeshare 1.13.3
*/
/** The levels of permission that a User or UserGroup can have on a resource. */
export var PermissionLevel;
(function (PermissionLevel) {
    /** No permissions. */
    PermissionLevel["None"] = "None";
    /** Can read resource information and config */
    PermissionLevel["Read"] = "Read";
    /** Can execute actions on the resource */
    PermissionLevel["Execute"] = "Execute";
    /** Can update the resource configuration */
    PermissionLevel["Write"] = "Write";
})(PermissionLevel || (PermissionLevel = {}));
export var ScheduleFormat;
(function (ScheduleFormat) {
    ScheduleFormat["English"] = "English";
    ScheduleFormat["Cron"] = "Cron";
})(ScheduleFormat || (ScheduleFormat = {}));
export var FileFormat;
(function (FileFormat) {
    FileFormat["KeyValue"] = "key_value";
    FileFormat["Toml"] = "toml";
    FileFormat["Yaml"] = "yaml";
    FileFormat["Json"] = "json";
})(FileFormat || (FileFormat = {}));
export var ActionState;
(function (ActionState) {
    /** Unknown case */
    ActionState["Unknown"] = "Unknown";
    /** Last clone / pull successful (or never cloned) */
    ActionState["Ok"] = "Ok";
    /** Last clone / pull failed */
    ActionState["Failed"] = "Failed";
    /** Currently running */
    ActionState["Running"] = "Running";
})(ActionState || (ActionState = {}));
export var TemplatesQueryBehavior;
(function (TemplatesQueryBehavior) {
    /** Include templates in results. Default. */
    TemplatesQueryBehavior["Include"] = "Include";
    /** Exclude templates from results. */
    TemplatesQueryBehavior["Exclude"] = "Exclude";
    /** Results *only* includes templates. */
    TemplatesQueryBehavior["Only"] = "Only";
})(TemplatesQueryBehavior || (TemplatesQueryBehavior = {}));
export var TagQueryBehavior;
(function (TagQueryBehavior) {
    /** Returns resources which have strictly all the tags */
    TagQueryBehavior["All"] = "All";
    /** Returns resources which have one or more of the tags */
    TagQueryBehavior["Any"] = "Any";
})(TagQueryBehavior || (TagQueryBehavior = {}));
/** Types of maintenance schedules */
export var MaintenanceScheduleType;
(function (MaintenanceScheduleType) {
    /** Daily at the specified time */
    MaintenanceScheduleType["Daily"] = "Daily";
    /** Weekly on the specified day and time */
    MaintenanceScheduleType["Weekly"] = "Weekly";
    /** One-time maintenance on a specific date and time */
    MaintenanceScheduleType["OneTime"] = "OneTime";
})(MaintenanceScheduleType || (MaintenanceScheduleType = {}));
export var Operation;
(function (Operation) {
    Operation["None"] = "None";
    Operation["CreateServer"] = "CreateServer";
    Operation["UpdateServer"] = "UpdateServer";
    Operation["DeleteServer"] = "DeleteServer";
    Operation["RenameServer"] = "RenameServer";
    Operation["StartContainer"] = "StartContainer";
    Operation["RestartContainer"] = "RestartContainer";
    Operation["PauseContainer"] = "PauseContainer";
    Operation["UnpauseContainer"] = "UnpauseContainer";
    Operation["StopContainer"] = "StopContainer";
    Operation["DestroyContainer"] = "DestroyContainer";
    Operation["StartAllContainers"] = "StartAllContainers";
    Operation["RestartAllContainers"] = "RestartAllContainers";
    Operation["PauseAllContainers"] = "PauseAllContainers";
    Operation["UnpauseAllContainers"] = "UnpauseAllContainers";
    Operation["StopAllContainers"] = "StopAllContainers";
    Operation["PruneContainers"] = "PruneContainers";
    Operation["CreateNetwork"] = "CreateNetwork";
    Operation["DeleteNetwork"] = "DeleteNetwork";
    Operation["PruneNetworks"] = "PruneNetworks";
    Operation["DeleteImage"] = "DeleteImage";
    Operation["PruneImages"] = "PruneImages";
    Operation["DeleteVolume"] = "DeleteVolume";
    Operation["PruneVolumes"] = "PruneVolumes";
    Operation["PruneDockerBuilders"] = "PruneDockerBuilders";
    Operation["PruneBuildx"] = "PruneBuildx";
    Operation["PruneSystem"] = "PruneSystem";
    Operation["CreateStack"] = "CreateStack";
    Operation["UpdateStack"] = "UpdateStack";
    Operation["RenameStack"] = "RenameStack";
    Operation["DeleteStack"] = "DeleteStack";
    Operation["WriteStackContents"] = "WriteStackContents";
    Operation["RefreshStackCache"] = "RefreshStackCache";
    Operation["PullStack"] = "PullStack";
    Operation["DeployStack"] = "DeployStack";
    Operation["StartStack"] = "StartStack";
    Operation["RestartStack"] = "RestartStack";
    Operation["PauseStack"] = "PauseStack";
    Operation["UnpauseStack"] = "UnpauseStack";
    Operation["StopStack"] = "StopStack";
    Operation["DestroyStack"] = "DestroyStack";
    Operation["RunStackService"] = "RunStackService";
    Operation["DeployStackService"] = "DeployStackService";
    Operation["PullStackService"] = "PullStackService";
    Operation["StartStackService"] = "StartStackService";
    Operation["RestartStackService"] = "RestartStackService";
    Operation["PauseStackService"] = "PauseStackService";
    Operation["UnpauseStackService"] = "UnpauseStackService";
    Operation["StopStackService"] = "StopStackService";
    Operation["DestroyStackService"] = "DestroyStackService";
    Operation["CreateDeployment"] = "CreateDeployment";
    Operation["UpdateDeployment"] = "UpdateDeployment";
    Operation["RenameDeployment"] = "RenameDeployment";
    Operation["DeleteDeployment"] = "DeleteDeployment";
    Operation["Deploy"] = "Deploy";
    Operation["PullDeployment"] = "PullDeployment";
    Operation["StartDeployment"] = "StartDeployment";
    Operation["RestartDeployment"] = "RestartDeployment";
    Operation["PauseDeployment"] = "PauseDeployment";
    Operation["UnpauseDeployment"] = "UnpauseDeployment";
    Operation["StopDeployment"] = "StopDeployment";
    Operation["DestroyDeployment"] = "DestroyDeployment";
    Operation["CreateBuild"] = "CreateBuild";
    Operation["UpdateBuild"] = "UpdateBuild";
    Operation["RenameBuild"] = "RenameBuild";
    Operation["DeleteBuild"] = "DeleteBuild";
    Operation["RunBuild"] = "RunBuild";
    Operation["CancelBuild"] = "CancelBuild";
    Operation["WriteDockerfile"] = "WriteDockerfile";
    Operation["CreateRepo"] = "CreateRepo";
    Operation["UpdateRepo"] = "UpdateRepo";
    Operation["RenameRepo"] = "RenameRepo";
    Operation["DeleteRepo"] = "DeleteRepo";
    Operation["CloneRepo"] = "CloneRepo";
    Operation["PullRepo"] = "PullRepo";
    Operation["BuildRepo"] = "BuildRepo";
    Operation["CancelRepoBuild"] = "CancelRepoBuild";
    Operation["CreateProcedure"] = "CreateProcedure";
    Operation["UpdateProcedure"] = "UpdateProcedure";
    Operation["RenameProcedure"] = "RenameProcedure";
    Operation["DeleteProcedure"] = "DeleteProcedure";
    Operation["RunProcedure"] = "RunProcedure";
    Operation["CreateAction"] = "CreateAction";
    Operation["UpdateAction"] = "UpdateAction";
    Operation["RenameAction"] = "RenameAction";
    Operation["DeleteAction"] = "DeleteAction";
    Operation["RunAction"] = "RunAction";
    Operation["CreateBuilder"] = "CreateBuilder";
    Operation["UpdateBuilder"] = "UpdateBuilder";
    Operation["RenameBuilder"] = "RenameBuilder";
    Operation["DeleteBuilder"] = "DeleteBuilder";
    Operation["CreateAlerter"] = "CreateAlerter";
    Operation["UpdateAlerter"] = "UpdateAlerter";
    Operation["RenameAlerter"] = "RenameAlerter";
    Operation["DeleteAlerter"] = "DeleteAlerter";
    Operation["TestAlerter"] = "TestAlerter";
    Operation["SendAlert"] = "SendAlert";
    Operation["CreateResourceSync"] = "CreateResourceSync";
    Operation["UpdateResourceSync"] = "UpdateResourceSync";
    Operation["RenameResourceSync"] = "RenameResourceSync";
    Operation["DeleteResourceSync"] = "DeleteResourceSync";
    Operation["WriteSyncContents"] = "WriteSyncContents";
    Operation["CommitSync"] = "CommitSync";
    Operation["RunSync"] = "RunSync";
    Operation["ClearRepoCache"] = "ClearRepoCache";
    Operation["BackupCoreDatabase"] = "BackupCoreDatabase";
    Operation["GlobalAutoUpdate"] = "GlobalAutoUpdate";
    Operation["CreateVariable"] = "CreateVariable";
    Operation["UpdateVariableValue"] = "UpdateVariableValue";
    Operation["DeleteVariable"] = "DeleteVariable";
    Operation["CreateGitProviderAccount"] = "CreateGitProviderAccount";
    Operation["UpdateGitProviderAccount"] = "UpdateGitProviderAccount";
    Operation["DeleteGitProviderAccount"] = "DeleteGitProviderAccount";
    Operation["CreateDockerRegistryAccount"] = "CreateDockerRegistryAccount";
    Operation["UpdateDockerRegistryAccount"] = "UpdateDockerRegistryAccount";
    Operation["DeleteDockerRegistryAccount"] = "DeleteDockerRegistryAccount";
})(Operation || (Operation = {}));
/** An update's status */
export var UpdateStatus;
(function (UpdateStatus) {
    /** The run is in the system but hasn't started yet */
    UpdateStatus["Queued"] = "Queued";
    /** The run is currently running */
    UpdateStatus["InProgress"] = "InProgress";
    /** The run is complete */
    UpdateStatus["Complete"] = "Complete";
})(UpdateStatus || (UpdateStatus = {}));
export var BuildState;
(function (BuildState) {
    /** Currently building */
    BuildState["Building"] = "Building";
    /** Last build successful (or never built) */
    BuildState["Ok"] = "Ok";
    /** Last build failed */
    BuildState["Failed"] = "Failed";
    /** Other case */
    BuildState["Unknown"] = "Unknown";
})(BuildState || (BuildState = {}));
export var RestartMode;
(function (RestartMode) {
    RestartMode["NoRestart"] = "no";
    RestartMode["OnFailure"] = "on-failure";
    RestartMode["Always"] = "always";
    RestartMode["UnlessStopped"] = "unless-stopped";
})(RestartMode || (RestartMode = {}));
export var TerminationSignal;
(function (TerminationSignal) {
    TerminationSignal["SigHup"] = "SIGHUP";
    TerminationSignal["SigInt"] = "SIGINT";
    TerminationSignal["SigQuit"] = "SIGQUIT";
    TerminationSignal["SigTerm"] = "SIGTERM";
})(TerminationSignal || (TerminationSignal = {}));
/**
 * Variants de/serialized from/to snake_case.
 *
 * Eg.
 * - NotDeployed -> not_deployed
 * - Restarting -> restarting
 * - Running -> running.
 */
export var DeploymentState;
(function (DeploymentState) {
    /** The deployment is currently re/deploying */
    DeploymentState["Deploying"] = "deploying";
    /** Container is running */
    DeploymentState["Running"] = "running";
    /** Container is created but not running */
    DeploymentState["Created"] = "created";
    /** Container is in restart loop */
    DeploymentState["Restarting"] = "restarting";
    /** Container is being removed */
    DeploymentState["Removing"] = "removing";
    /** Container is paused */
    DeploymentState["Paused"] = "paused";
    /** Container is exited */
    DeploymentState["Exited"] = "exited";
    /** Container is dead */
    DeploymentState["Dead"] = "dead";
    /** The deployment is not deployed (no matching container) */
    DeploymentState["NotDeployed"] = "not_deployed";
    /** Server not reachable for status */
    DeploymentState["Unknown"] = "unknown";
})(DeploymentState || (DeploymentState = {}));
/** Severity level of problem. */
export var SeverityLevel;
(function (SeverityLevel) {
    /**
     * No problem.
     *
     * Aliases: ok, low, l
     */
    SeverityLevel["Ok"] = "OK";
    /**
     * Problem is imminent.
     *
     * Aliases: warning, w, medium, m
     */
    SeverityLevel["Warning"] = "WARNING";
    /**
     * Problem fully realized.
     *
     * Aliases: critical, c, high, h
     */
    SeverityLevel["Critical"] = "CRITICAL";
})(SeverityLevel || (SeverityLevel = {}));
export var Timelength;
(function (Timelength) {
    /** `1-sec` */
    Timelength["OneSecond"] = "1-sec";
    /** `5-sec` */
    Timelength["FiveSeconds"] = "5-sec";
    /** `10-sec` */
    Timelength["TenSeconds"] = "10-sec";
    /** `15-sec` */
    Timelength["FifteenSeconds"] = "15-sec";
    /** `30-sec` */
    Timelength["ThirtySeconds"] = "30-sec";
    /** `1-min` */
    Timelength["OneMinute"] = "1-min";
    /** `2-min` */
    Timelength["TwoMinutes"] = "2-min";
    /** `5-min` */
    Timelength["FiveMinutes"] = "5-min";
    /** `10-min` */
    Timelength["TenMinutes"] = "10-min";
    /** `15-min` */
    Timelength["FifteenMinutes"] = "15-min";
    /** `30-min` */
    Timelength["ThirtyMinutes"] = "30-min";
    /** `1-hr` */
    Timelength["OneHour"] = "1-hr";
    /** `2-hr` */
    Timelength["TwoHours"] = "2-hr";
    /** `6-hr` */
    Timelength["SixHours"] = "6-hr";
    /** `8-hr` */
    Timelength["EightHours"] = "8-hr";
    /** `12-hr` */
    Timelength["TwelveHours"] = "12-hr";
    /** `1-day` */
    Timelength["OneDay"] = "1-day";
    /** `3-day` */
    Timelength["ThreeDay"] = "3-day";
    /** `1-wk` */
    Timelength["OneWeek"] = "1-wk";
    /** `2-wk` */
    Timelength["TwoWeeks"] = "2-wk";
    /** `30-day` */
    Timelength["ThirtyDays"] = "30-day";
})(Timelength || (Timelength = {}));
export var TagColor;
(function (TagColor) {
    TagColor["LightSlate"] = "LightSlate";
    TagColor["Slate"] = "Slate";
    TagColor["DarkSlate"] = "DarkSlate";
    TagColor["LightRed"] = "LightRed";
    TagColor["Red"] = "Red";
    TagColor["DarkRed"] = "DarkRed";
    TagColor["LightOrange"] = "LightOrange";
    TagColor["Orange"] = "Orange";
    TagColor["DarkOrange"] = "DarkOrange";
    TagColor["LightAmber"] = "LightAmber";
    TagColor["Amber"] = "Amber";
    TagColor["DarkAmber"] = "DarkAmber";
    TagColor["LightYellow"] = "LightYellow";
    TagColor["Yellow"] = "Yellow";
    TagColor["DarkYellow"] = "DarkYellow";
    TagColor["LightLime"] = "LightLime";
    TagColor["Lime"] = "Lime";
    TagColor["DarkLime"] = "DarkLime";
    TagColor["LightGreen"] = "LightGreen";
    TagColor["Green"] = "Green";
    TagColor["DarkGreen"] = "DarkGreen";
    TagColor["LightEmerald"] = "LightEmerald";
    TagColor["Emerald"] = "Emerald";
    TagColor["DarkEmerald"] = "DarkEmerald";
    TagColor["LightTeal"] = "LightTeal";
    TagColor["Teal"] = "Teal";
    TagColor["DarkTeal"] = "DarkTeal";
    TagColor["LightCyan"] = "LightCyan";
    TagColor["Cyan"] = "Cyan";
    TagColor["DarkCyan"] = "DarkCyan";
    TagColor["LightSky"] = "LightSky";
    TagColor["Sky"] = "Sky";
    TagColor["DarkSky"] = "DarkSky";
    TagColor["LightBlue"] = "LightBlue";
    TagColor["Blue"] = "Blue";
    TagColor["DarkBlue"] = "DarkBlue";
    TagColor["LightIndigo"] = "LightIndigo";
    TagColor["Indigo"] = "Indigo";
    TagColor["DarkIndigo"] = "DarkIndigo";
    TagColor["LightViolet"] = "LightViolet";
    TagColor["Violet"] = "Violet";
    TagColor["DarkViolet"] = "DarkViolet";
    TagColor["LightPurple"] = "LightPurple";
    TagColor["Purple"] = "Purple";
    TagColor["DarkPurple"] = "DarkPurple";
    TagColor["LightFuchsia"] = "LightFuchsia";
    TagColor["Fuchsia"] = "Fuchsia";
    TagColor["DarkFuchsia"] = "DarkFuchsia";
    TagColor["LightPink"] = "LightPink";
    TagColor["Pink"] = "Pink";
    TagColor["DarkPink"] = "DarkPink";
    TagColor["LightRose"] = "LightRose";
    TagColor["Rose"] = "Rose";
    TagColor["DarkRose"] = "DarkRose";
})(TagColor || (TagColor = {}));
export var ContainerStateStatusEnum;
(function (ContainerStateStatusEnum) {
    ContainerStateStatusEnum["Running"] = "running";
    ContainerStateStatusEnum["Created"] = "created";
    ContainerStateStatusEnum["Paused"] = "paused";
    ContainerStateStatusEnum["Restarting"] = "restarting";
    ContainerStateStatusEnum["Exited"] = "exited";
    ContainerStateStatusEnum["Removing"] = "removing";
    ContainerStateStatusEnum["Dead"] = "dead";
    ContainerStateStatusEnum["Empty"] = "";
})(ContainerStateStatusEnum || (ContainerStateStatusEnum = {}));
export var HealthStatusEnum;
(function (HealthStatusEnum) {
    HealthStatusEnum["Empty"] = "";
    HealthStatusEnum["None"] = "none";
    HealthStatusEnum["Starting"] = "starting";
    HealthStatusEnum["Healthy"] = "healthy";
    HealthStatusEnum["Unhealthy"] = "unhealthy";
})(HealthStatusEnum || (HealthStatusEnum = {}));
export var RestartPolicyNameEnum;
(function (RestartPolicyNameEnum) {
    RestartPolicyNameEnum["Empty"] = "";
    RestartPolicyNameEnum["No"] = "no";
    RestartPolicyNameEnum["Always"] = "always";
    RestartPolicyNameEnum["UnlessStopped"] = "unless-stopped";
    RestartPolicyNameEnum["OnFailure"] = "on-failure";
})(RestartPolicyNameEnum || (RestartPolicyNameEnum = {}));
export var MountTypeEnum;
(function (MountTypeEnum) {
    MountTypeEnum["Empty"] = "";
    MountTypeEnum["Bind"] = "bind";
    MountTypeEnum["Volume"] = "volume";
    MountTypeEnum["Image"] = "image";
    MountTypeEnum["Tmpfs"] = "tmpfs";
    MountTypeEnum["Npipe"] = "npipe";
    MountTypeEnum["Cluster"] = "cluster";
})(MountTypeEnum || (MountTypeEnum = {}));
export var MountBindOptionsPropagationEnum;
(function (MountBindOptionsPropagationEnum) {
    MountBindOptionsPropagationEnum["Empty"] = "";
    MountBindOptionsPropagationEnum["Private"] = "private";
    MountBindOptionsPropagationEnum["Rprivate"] = "rprivate";
    MountBindOptionsPropagationEnum["Shared"] = "shared";
    MountBindOptionsPropagationEnum["Rshared"] = "rshared";
    MountBindOptionsPropagationEnum["Slave"] = "slave";
    MountBindOptionsPropagationEnum["Rslave"] = "rslave";
})(MountBindOptionsPropagationEnum || (MountBindOptionsPropagationEnum = {}));
export var HostConfigCgroupnsModeEnum;
(function (HostConfigCgroupnsModeEnum) {
    HostConfigCgroupnsModeEnum["Empty"] = "";
    HostConfigCgroupnsModeEnum["Private"] = "private";
    HostConfigCgroupnsModeEnum["Host"] = "host";
})(HostConfigCgroupnsModeEnum || (HostConfigCgroupnsModeEnum = {}));
export var HostConfigIsolationEnum;
(function (HostConfigIsolationEnum) {
    HostConfigIsolationEnum["Empty"] = "";
    HostConfigIsolationEnum["Default"] = "default";
    HostConfigIsolationEnum["Process"] = "process";
    HostConfigIsolationEnum["Hyperv"] = "hyperv";
})(HostConfigIsolationEnum || (HostConfigIsolationEnum = {}));
export var VolumeScopeEnum;
(function (VolumeScopeEnum) {
    VolumeScopeEnum["Empty"] = "";
    VolumeScopeEnum["Local"] = "local";
    VolumeScopeEnum["Global"] = "global";
})(VolumeScopeEnum || (VolumeScopeEnum = {}));
export var ClusterVolumeSpecAccessModeScopeEnum;
(function (ClusterVolumeSpecAccessModeScopeEnum) {
    ClusterVolumeSpecAccessModeScopeEnum["Empty"] = "";
    ClusterVolumeSpecAccessModeScopeEnum["Single"] = "single";
    ClusterVolumeSpecAccessModeScopeEnum["Multi"] = "multi";
})(ClusterVolumeSpecAccessModeScopeEnum || (ClusterVolumeSpecAccessModeScopeEnum = {}));
export var ClusterVolumeSpecAccessModeSharingEnum;
(function (ClusterVolumeSpecAccessModeSharingEnum) {
    ClusterVolumeSpecAccessModeSharingEnum["Empty"] = "";
    ClusterVolumeSpecAccessModeSharingEnum["None"] = "none";
    ClusterVolumeSpecAccessModeSharingEnum["Readonly"] = "readonly";
    ClusterVolumeSpecAccessModeSharingEnum["Onewriter"] = "onewriter";
    ClusterVolumeSpecAccessModeSharingEnum["All"] = "all";
})(ClusterVolumeSpecAccessModeSharingEnum || (ClusterVolumeSpecAccessModeSharingEnum = {}));
export var ClusterVolumeSpecAccessModeAvailabilityEnum;
(function (ClusterVolumeSpecAccessModeAvailabilityEnum) {
    ClusterVolumeSpecAccessModeAvailabilityEnum["Empty"] = "";
    ClusterVolumeSpecAccessModeAvailabilityEnum["Active"] = "active";
    ClusterVolumeSpecAccessModeAvailabilityEnum["Pause"] = "pause";
    ClusterVolumeSpecAccessModeAvailabilityEnum["Drain"] = "drain";
})(ClusterVolumeSpecAccessModeAvailabilityEnum || (ClusterVolumeSpecAccessModeAvailabilityEnum = {}));
export var ClusterVolumePublishStatusStateEnum;
(function (ClusterVolumePublishStatusStateEnum) {
    ClusterVolumePublishStatusStateEnum["Empty"] = "";
    ClusterVolumePublishStatusStateEnum["PendingPublish"] = "pending-publish";
    ClusterVolumePublishStatusStateEnum["Published"] = "published";
    ClusterVolumePublishStatusStateEnum["PendingNodeUnpublish"] = "pending-node-unpublish";
    ClusterVolumePublishStatusStateEnum["PendingControllerUnpublish"] = "pending-controller-unpublish";
})(ClusterVolumePublishStatusStateEnum || (ClusterVolumePublishStatusStateEnum = {}));
export var PortTypeEnum;
(function (PortTypeEnum) {
    PortTypeEnum["EMPTY"] = "";
    PortTypeEnum["TCP"] = "tcp";
    PortTypeEnum["UDP"] = "udp";
    PortTypeEnum["SCTP"] = "sctp";
})(PortTypeEnum || (PortTypeEnum = {}));
export var ProcedureState;
(function (ProcedureState) {
    /** Currently running */
    ProcedureState["Running"] = "Running";
    /** Last run successful */
    ProcedureState["Ok"] = "Ok";
    /** Last run failed */
    ProcedureState["Failed"] = "Failed";
    /** Other case (never run) */
    ProcedureState["Unknown"] = "Unknown";
})(ProcedureState || (ProcedureState = {}));
export var RepoState;
(function (RepoState) {
    /** Unknown case */
    RepoState["Unknown"] = "Unknown";
    /** Last clone / pull successful (or never cloned) */
    RepoState["Ok"] = "Ok";
    /** Last clone / pull failed */
    RepoState["Failed"] = "Failed";
    /** Currently cloning */
    RepoState["Cloning"] = "Cloning";
    /** Currently pulling */
    RepoState["Pulling"] = "Pulling";
    /** Currently building */
    RepoState["Building"] = "Building";
})(RepoState || (RepoState = {}));
export var ResourceSyncState;
(function (ResourceSyncState) {
    /** Currently syncing */
    ResourceSyncState["Syncing"] = "Syncing";
    /** Updates pending */
    ResourceSyncState["Pending"] = "Pending";
    /** Last sync successful (or never synced). No Changes pending */
    ResourceSyncState["Ok"] = "Ok";
    /** Last sync failed */
    ResourceSyncState["Failed"] = "Failed";
    /** Other case */
    ResourceSyncState["Unknown"] = "Unknown";
})(ResourceSyncState || (ResourceSyncState = {}));
export var ServerState;
(function (ServerState) {
    /** Server health check passing. */
    ServerState["Ok"] = "Ok";
    /** Server is unreachable. */
    ServerState["NotOk"] = "NotOk";
    /** Server is disabled. */
    ServerState["Disabled"] = "Disabled";
})(ServerState || (ServerState = {}));
export var StackState;
(function (StackState) {
    /** The stack is currently re/deploying */
    StackState["Deploying"] = "deploying";
    /** All containers are running. */
    StackState["Running"] = "running";
    /** All containers are paused */
    StackState["Paused"] = "paused";
    /** All contianers are stopped */
    StackState["Stopped"] = "stopped";
    /** All containers are created */
    StackState["Created"] = "created";
    /** All containers are restarting */
    StackState["Restarting"] = "restarting";
    /** All containers are dead */
    StackState["Dead"] = "dead";
    /** All containers are removing */
    StackState["Removing"] = "removing";
    /** The containers are in a mix of states */
    StackState["Unhealthy"] = "unhealthy";
    /** The stack is not deployed */
    StackState["Down"] = "down";
    /** Server not reachable for status */
    StackState["Unknown"] = "unknown";
})(StackState || (StackState = {}));
export var RepoWebhookAction;
(function (RepoWebhookAction) {
    RepoWebhookAction["Clone"] = "Clone";
    RepoWebhookAction["Pull"] = "Pull";
    RepoWebhookAction["Build"] = "Build";
})(RepoWebhookAction || (RepoWebhookAction = {}));
export var StackWebhookAction;
(function (StackWebhookAction) {
    StackWebhookAction["Refresh"] = "Refresh";
    StackWebhookAction["Deploy"] = "Deploy";
})(StackWebhookAction || (StackWebhookAction = {}));
export var SyncWebhookAction;
(function (SyncWebhookAction) {
    SyncWebhookAction["Refresh"] = "Refresh";
    SyncWebhookAction["Sync"] = "Sync";
})(SyncWebhookAction || (SyncWebhookAction = {}));
/**
 * Configures the behavior of [CreateTerminal] if the
 * specified terminal name already exists.
 */
export var TerminalRecreateMode;
(function (TerminalRecreateMode) {
    /**
     * Never kill the old terminal if it already exists.
     * If the command is different, returns error.
     */
    TerminalRecreateMode["Never"] = "Never";
    /** Always kill the old terminal and create new one */
    TerminalRecreateMode["Always"] = "Always";
    /** Only kill and recreate if the command is different. */
    TerminalRecreateMode["DifferentCommand"] = "DifferentCommand";
})(TerminalRecreateMode || (TerminalRecreateMode = {}));
export var DefaultRepoFolder;
(function (DefaultRepoFolder) {
    /** /${root_directory}/stacks */
    DefaultRepoFolder["Stacks"] = "Stacks";
    /** /${root_directory}/builds */
    DefaultRepoFolder["Builds"] = "Builds";
    /** /${root_directory}/repos */
    DefaultRepoFolder["Repos"] = "Repos";
    /**
     * If the repo is only cloned
     * in the core repo cache (resource sync),
     * this isn't relevant.
     */
    DefaultRepoFolder["NotApplicable"] = "NotApplicable";
})(DefaultRepoFolder || (DefaultRepoFolder = {}));
export var SearchCombinator;
(function (SearchCombinator) {
    SearchCombinator["Or"] = "Or";
    SearchCombinator["And"] = "And";
})(SearchCombinator || (SearchCombinator = {}));
/** Days of the week */
export var DayOfWeek;
(function (DayOfWeek) {
    DayOfWeek["Monday"] = "Monday";
    DayOfWeek["Tuesday"] = "Tuesday";
    DayOfWeek["Wednesday"] = "Wednesday";
    DayOfWeek["Thursday"] = "Thursday";
    DayOfWeek["Friday"] = "Friday";
    DayOfWeek["Saturday"] = "Saturday";
    DayOfWeek["Sunday"] = "Sunday";
})(DayOfWeek || (DayOfWeek = {}));
/**
 * One representative IANA zone for each distinct base UTC offset in the tz database.
 * https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
 *
 * The `serde`/`strum` renames ensure the canonical identifier is used
 * when serializing or parsing from a string such as `"Etc/UTC"`.
 */
export var IanaTimezone;
(function (IanaTimezone) {
    /** UTC−12:00 */
    IanaTimezone["EtcGmtMinus12"] = "Etc/GMT+12";
    /** UTC−11:00 */
    IanaTimezone["PacificPagoPago"] = "Pacific/Pago_Pago";
    /** UTC−10:00 */
    IanaTimezone["PacificHonolulu"] = "Pacific/Honolulu";
    /** UTC−09:30 */
    IanaTimezone["PacificMarquesas"] = "Pacific/Marquesas";
    /** UTC−09:00 */
    IanaTimezone["AmericaAnchorage"] = "America/Anchorage";
    /** UTC−08:00 */
    IanaTimezone["AmericaLosAngeles"] = "America/Los_Angeles";
    /** UTC−07:00 */
    IanaTimezone["AmericaDenver"] = "America/Denver";
    /** UTC−06:00 */
    IanaTimezone["AmericaChicago"] = "America/Chicago";
    /** UTC−05:00 */
    IanaTimezone["AmericaNewYork"] = "America/New_York";
    /** UTC−04:00 */
    IanaTimezone["AmericaHalifax"] = "America/Halifax";
    /** UTC−03:30 */
    IanaTimezone["AmericaStJohns"] = "America/St_Johns";
    /** UTC−03:00 */
    IanaTimezone["AmericaSaoPaulo"] = "America/Sao_Paulo";
    /** UTC−02:00 */
    IanaTimezone["AmericaNoronha"] = "America/Noronha";
    /** UTC−01:00 */
    IanaTimezone["AtlanticAzores"] = "Atlantic/Azores";
    /** UTC±00:00 */
    IanaTimezone["EtcUtc"] = "Etc/UTC";
    /** UTC+01:00 */
    IanaTimezone["EuropeBerlin"] = "Europe/Berlin";
    /** UTC+02:00 */
    IanaTimezone["EuropeBucharest"] = "Europe/Bucharest";
    /** UTC+03:00 */
    IanaTimezone["EuropeMoscow"] = "Europe/Moscow";
    /** UTC+03:30 */
    IanaTimezone["AsiaTehran"] = "Asia/Tehran";
    /** UTC+04:00 */
    IanaTimezone["AsiaDubai"] = "Asia/Dubai";
    /** UTC+04:30 */
    IanaTimezone["AsiaKabul"] = "Asia/Kabul";
    /** UTC+05:00 */
    IanaTimezone["AsiaKarachi"] = "Asia/Karachi";
    /** UTC+05:30 */
    IanaTimezone["AsiaKolkata"] = "Asia/Kolkata";
    /** UTC+05:45 */
    IanaTimezone["AsiaKathmandu"] = "Asia/Kathmandu";
    /** UTC+06:00 */
    IanaTimezone["AsiaDhaka"] = "Asia/Dhaka";
    /** UTC+06:30 */
    IanaTimezone["AsiaYangon"] = "Asia/Yangon";
    /** UTC+07:00 */
    IanaTimezone["AsiaBangkok"] = "Asia/Bangkok";
    /** UTC+08:00 */
    IanaTimezone["AsiaShanghai"] = "Asia/Shanghai";
    /** UTC+08:45 */
    IanaTimezone["AustraliaEucla"] = "Australia/Eucla";
    /** UTC+09:00 */
    IanaTimezone["AsiaTokyo"] = "Asia/Tokyo";
    /** UTC+09:30 */
    IanaTimezone["AustraliaAdelaide"] = "Australia/Adelaide";
    /** UTC+10:00 */
    IanaTimezone["AustraliaSydney"] = "Australia/Sydney";
    /** UTC+10:30 */
    IanaTimezone["AustraliaLordHowe"] = "Australia/Lord_Howe";
    /** UTC+11:00 */
    IanaTimezone["PacificPortMoresby"] = "Pacific/Port_Moresby";
    /** UTC+12:00 */
    IanaTimezone["PacificAuckland"] = "Pacific/Auckland";
    /** UTC+12:45 */
    IanaTimezone["PacificChatham"] = "Pacific/Chatham";
    /** UTC+13:00 */
    IanaTimezone["PacificTongatapu"] = "Pacific/Tongatapu";
    /** UTC+14:00 */
    IanaTimezone["PacificKiritimati"] = "Pacific/Kiritimati";
})(IanaTimezone || (IanaTimezone = {}));
/** The specific types of permission that a User or UserGroup can have on a resource. */
export var SpecificPermission;
(function (SpecificPermission) {
    /**
     * On **Server**
     * - Access the terminal apis
     * On **Stack / Deployment**
     * - Access the container exec Apis
     */
    SpecificPermission["Terminal"] = "Terminal";
    /**
     * On **Server**
     * - Allowed to attach Stacks, Deployments, Repos, Builders to the Server
     * On **Builder**
     * - Allowed to attach Builds to the Builder
     * On **Build**
     * - Allowed to attach Deployments to the Build
     */
    SpecificPermission["Attach"] = "Attach";
    /**
     * On **Server**
     * - Access the `container inspect` apis
     * On **Stack / Deployment**
     * - Access `container inspect` apis for associated containers
     */
    SpecificPermission["Inspect"] = "Inspect";
    /**
     * On **Server**
     * - Read all container logs on the server
     * On **Stack / Deployment**
     * - Read the container logs
     */
    SpecificPermission["Logs"] = "Logs";
    /**
     * On **Server**
     * - Read all the processes on the host
     */
    SpecificPermission["Processes"] = "Processes";
})(SpecificPermission || (SpecificPermission = {}));
